{"version":3,"sources":["components/Row.js","components/request.js","components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","fetch","then","response","json","data","results","fetchData","className","style","marginLeft","map","movie","key","id","onClick","movieTrailer","name","url","urlParams","URLSearchParams","URL","search","get","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","request","fetchTrending","fetchNetflixOriginal","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","backgroundImage","backgroundPosition","backgroundSize","original_name","overview","substr","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.57092d03.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      await fetch(fetchUrl)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          //   console.log(data.results);\r\n          setMovies(data.results);\r\n        });\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: 300,\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h5 style={{ marginLeft: 20 }}>{title}</h5>\r\n      <div className=\"row__poster\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            src={`${baseURL}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n            className={`posters ${isLargeRow && \"posters_large\"}`}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"64ad98e0633e8186c833007a318a72ed\";\r\n\r\nconst request = {\r\n  fetchTrending: `https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginal: `https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default request;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function Banner({ fetchUrl }) {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      await fetch(fetchUrl)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setMovie(\r\n            data.results[Math.floor(Math.random() * data.results.length - 1)]\r\n          );\r\n        });\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  // console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center\",\r\n        backgroundSize: \"cover\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"opacity\" />\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./components/Row\";\nimport request from \"./components/request\";\nimport Banner from \"./components/Banner\";\n// import Nav from \"./components/Nav\";\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <Nav /> */}\n      <Banner fetchUrl={request.fetchNetflixOriginal} />\n      <Row\n        title=\"NETFLIX ORIGINAL\"\n        fetchUrl={request.fetchNetflixOriginal}\n        isLargeRow\n      />\n      <Row title=\"TRENDING\" fetchUrl={request.fetchTrending} />\n      <Row title=\"TOP RATED\" fetchUrl={request.fetchTopRated} />\n      <Row title=\"ACTION MOVIES\" fetchUrl={request.fetchActionMovies} />\n      <Row title=\"COMEDY MOVIES\" fetchUrl={request.fetchComedyMovies} />\n      <Row title=\"HORROR MOVIES\" fetchUrl={request.fetchHorrorMovies} />\n      <Row title=\"ROMANCE MOVIES\" fetchUrl={request.fetchRomanceMovies} />\n      <Row title=\"DOCUMENTARIES\" fetchUrl={request.fetchDocumentaries} />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}